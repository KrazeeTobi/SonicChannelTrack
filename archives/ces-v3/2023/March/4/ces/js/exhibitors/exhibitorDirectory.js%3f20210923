$(function ($) {

    let awaitNextPage = false;
    let isLastPage = false;
    let pageHeight = 0;

    var exhibitorData = {};

    var filters = {
        searchTerm: '',
        sortBy: 'alpha',
        alpha: '',
        state: '',
        country: '',
        venue: '',
        exhibitorType: '',
        productCategories: [],
        pageNo: 1,
        pageSize: 30
    };

    var multiFiltersSelector = '[id^="filter-checkbox"]';
    var radioFiltersSelector = '[id^="filter-radio"]';
    var mobileFiltersToggleSelector = '.toggle-filters';

    /* Event Listeners */
    document.addEventListener("scroll", elScroll);

    $('body').on('click', '#stickynav .hero__alphaIndex a', function () {
        scrollTop();
        filters.alpha = this.innerText;
        filters.pageNo = 1;
        loadExhibitorItems(filters);
    });

    $('body').on('click', '#clear-filters', function (e) {
        e.preventDefault();
        scrollTop();
        resetFilters();
        loadExhibitorItems(filters);
    });

    $('body').on('keydown', 'input[type = search]', function (e) {
        if (e.which == 13) {
            e.preventDefault();
            scrollTop();
            search(this.value);
        }
    });

    $('.searchButton').on('click', function (e) {
        var term = $('.searchInput input[type=search]')[0].value;
        scrollTop();
        search(term);
    });

    function filterEventListener() {
        var filterName = this.name;

        if (filterName === "productCategories") {
            if (!this.checked) {
                filters[filterName] = filters[filterName].filter(e => e !== this.value);
            }
            else {
                filters[filterName].push(this.value);
            }
        }
        else {
            filters[filterName] = this.value;
        }

        filters.pageNo = 1;
        loadExhibitorItems(filters);
    }

    function dropDownFilterEventListener(obj, value) {
        var filterName = obj.$input[0].name;
        filters[filterName] = value;
        filters.pageNo = 1;
        loadExhibitorItems(filters);
    }

    function toggleMobileFilters(e) {
        const eIsNotNullOrUndefined = e !== null && typeof e !== "undefined";
        if (eIsNotNullOrUndefined) {
            // ReSharper disable once QualifiedExpressionMaybeNull
            e.preventDefault();
        }

        $("html,body").animate({ scrollTop: $('body').position().top }, 400);
        $('body').toggleClass('schedule-filters--mobile-open');
        $('body').toggleClass('no-scroll-mobile');
    }

    /* API calls */
    function loadExhibitorItems(filters) {
        $.ajax({
            type: "GET",
            url: "/api/Exhibitors",
            data: filters,
            headers: {
                'ctaapi-version': '1.1'
            }
        })
            .done(function (data, textStatus, jqXhr) {
                exhibitorData = data;
                exhibitorData.currentPage = jqXhr.getResponseHeader("X-Pagination-CurrentPage");
                exhibitorData.pageSize = jqXhr.getResponseHeader("X-Pagination-PageSize");
                exhibitorData.nextPageUrl = jqXhr.getResponseHeader("X-Pagination-NextPageUrl");
                isLastPage = getIsLastPage(exhibitorData.nextPageUrl);
                renderSidebarFilters();
                renderAlphaFilter();
                renderPage();
                $('.searchInput input[type=search]').val(filters.searchTerm);
                pageHeight = getPageHeight();
                scrollTop();
            })
            .fail(function () {
                console.log("There was an error retreiving Exhibitors");
            });
    }

    function lazyLoadExhibitorItems(filters) {
        awaitNextPage = true;
        $.ajax({
            type: "GET",
            url: '/api/Exhibitors',
            data: filters,
            headers: {
                'ctaapi-version': '1.1'
            }
        })
            .done(function (data, textStatus, jqXhr) {
                exhibitorData.filters = data.filters;
                $.merge(exhibitorData.exhibitors, data.exhibitors);
                exhibitorData.currentPage = jqXhr.getResponseHeader("X-Pagination-CurrentPage");
                exhibitorData.pageSize = jqXhr.getResponseHeader("X-Pagination-PageSize");
                exhibitorData.nextPageUrl = jqXhr.getResponseHeader("X-Pagination-NextPageUrl");
                isLastPage = getIsLastPage(exhibitorData.nextPageUrl);
                awaitNextPage = false;
                renderPage();
            })
            .fail(function () {
                console.log("fail");
            })
            .always(function () {
                console.log("always");
            });
    }

    /* Functions */
    function load() {
        loadExhibitorItems(filters);
    }

    function elScroll(e) {
        if (document.readyState !== 'complete' || awaitNextPage || isLastPage) {
            e.preventDefault();
            return;
        }

        if (window.pageYOffset > pageHeight * filters.pageNo * 7 / 8) {// start at 5/6 of the way through the page
            getNextPage();
        }
    }

    function getNextPage() {
        filters.pageNo++;
        lazyLoadExhibitorItems(filters);
    }

    function getPageHeight() {
        if (!filters.pageSize) {//pageSize is set as static property in the namespace
            return 0;
        }
        var elementList = document.querySelectorAll(".listingCard");
        const firstElement = elementList[0];
        var lastElement = elementList[filters.pageSize - 1];
        if (!lastElement) {
            lastElement = elementList[elementList.length - 1];
        }

        /** @type {number} */
        const pageHeight =
            (lastElement.getBoundingClientRect().top
                - firstElement.getBoundingClientRect().top);

        return pageHeight;
    }

    function getIsLastPage(url) {
        if (url === "")
            return true;
        else
            return false;
    }

    function scrollTop() {
        $("html,body").animate({ scrollTop: $('.exhibitor__search').position().top }, 400);
    }

    function resetFilters() {
        filters = {
            searchTerm: '',
            sortBy: 'alpha',
            alpha: '',
            state: '',
            country: '',
            venue: '',
            exhibitorType: '',
            productCategories: [],
            pageNo: 1,
            pageSize: 30
        };
    }

    function search(searchTerm) {
        resetFilters();
        filters.searchTerm = searchTerm;
        filters.pageNo = 1;
        loadExhibitorItems(filters);
    }

    function renderAlphaFilter() {
        var templateData = { filters: exhibitorData.filters.parentFilters.filter(e => e.name == "alpha") };
        $("#alphaFilters").html(CES.templates.exhibitorAlphaFilter(templateData));
    }

    function renderSidebarFilters() {
        var sidebarFilters = exhibitorData.filters.parentFilters.filter(e => e.name !== "alpha")
        var templateData = { filters: sidebarFilters };
        $("#filters").html(CES.templates.exhibitorFilters(templateData));

        instantiateSelectizeDropdowns();
        addFilterEventListeners();
    }

    function instantiateSelectizeDropdowns() {
        $('select.schedule-filter-select').selectize({
            copyClassesToDropdown: true,
            onChange: function (value) {
                this.$dropdown_content.removeHighlight();
                dropDownFilterEventListener(this, value);
            },
            onType: function (str) {
                str || this.$dropdown_content.removeHighlight();
            },
            optgroupField: "mygroup",
            render: {
                optgroup_header: function (data, escape) {
                    return '<div class="optgroup-header">' + escape(data.a) + '</div>';
                },
                option: function (item, escape) {
                    let option = '<div>';

                    if (item.noMatchingData) {
                        option = '<div style="pointer-events: none; color: #aaa;">';
                    }

                    option += escape(item.text);
                    option += "</div>";

                    return option;
                }
            }
        });
    }

    function addFilterEventListeners() {
        const filterElements = $(radioFiltersSelector);
        var multiFilterElements = $(multiFiltersSelector);

        for (let i = 0; i < multiFilterElements.length; i++) {
            filterElements.push(multiFilterElements[i]);
        }

        for (let i = 0; i < filterElements.length; i++) {
            var element = filterElements[i];
            element.addEventListener('change', filterEventListener);
        }

        var mobileFiltersToggleElements = $(mobileFiltersToggleSelector);

        for (let i = 0; i < mobileFiltersToggleElements.length; i++) {
            var toggleElement = mobileFiltersToggleElements[i];
            toggleElement.addEventListener('click', toggleMobileFilters);
        }
    }

    function renderFeatured() {
        var templateData = { featured: exhibitorData.featuredExhibitors };
        $("#featuredItems").html(CES.templates.exhibitorFeatured(templateData));
    }

    function renderPage() {
        var groupedItems = groupByArray(exhibitorData.exhibitors, 'alpha');
        var templateData = { groupedItems: groupedItems };
        $("#listingItems").html(CES.templates.exhibitorListing(templateData));
    }

    function groupByArray(xs, key, valueModifier) {
        /// <summary>Groups the specified array by the value returned by key with an optional value modifying function.</summary>
        /// <param name="xs" type="Array">Array to group.</param>
        /// <param name="key" type="PlainObject or String or function">Key used to retrieve value to group on.</param>
        /// <param name="valueModifier" type="function">Function used to modify the value for custom grouping control.</param>
        return xs.reduce(function (rv, x) {
            var el;
            var v = key instanceof Function ? key(x) : x[key];
            el = rv.find(function (r) {
                return r.key === v;
            });

            if (el) {
                el.values.push(x);
            } else {
                rv.push({ key: v, values: [x] });
            }
            return rv;
        }, []);
    }

    /* Handlebars Helpers */
    Handlebars.registerHelper('hasActiveBooths', function (ary) {
        if (!ary.booths || ary.booths.length === 0)
            return false;

        var activeBooths = ary.booths.filter(function (s) { return !s.boothNumber.startsWith('DO-'); });
        return activeBooths.length > 0;
    });

    Handlebars.registerHelper('each_Count', function (ary, max, options) {
        if (!ary.booths || ary.booths.length === 0)
            return options.inverse(this);

        var activeBooths = ary.booths.filter(function (s) { return !s.boothNumber.startsWith('DO-'); });
        var result = [];
        var count = 0;
        var seeMore = false;
        var seeAll = false;
        for (var i = 0; count < max && i < activeBooths.length; ++i) {
            if (activeBooths[i].boothNumber.length + count + 2 < max) {
                result.push(options.fn(activeBooths[i]));
                count = count + activeBooths[i].boothNumber.length + 2;
            }
            else {
                if (i === 0)
                    seeAll = true;
                seeMore = true;
                break;
            }
        }

        if (seeAll)
            result.push("<a href=" + ary.companyLink + " target=\"_blank\">SEE ALL</a>");
        else if (seeMore)
            result.push("<a href=" + ary.companyLink + " target=\"_blank\">...AND MORE</a>");

        return result.join(', ');
    });

    Handlebars.registerHelper('each_CategoryCount', function (ary, max, options) {
        if (!ary.categories || ary.categories.length === 0)
            return options.inverse(this);

        var result = [];
        var count = 0;
        var seeMore = false;
        var seeAll = false;
        for (var i = 0; count < max && i < ary.categories.length; ++i) {
            if (ary.categories[i].categoryName.length + count + 2 < max) {
                result.push(options.fn(ary.categories[i]));
                count = count + ary.categories[i].categoryName.length + 2;
            }
            else {
                if (i === 0)
                    seeAll = true;
                seeMore = true;
                break;
            }
        }

        if (seeAll)
            result.push("<div class=\"label-text\">SEE ALL</div>");
        else if (seeMore)
            result.push("<div class=\"label-text\">...AND MORE</div>");

        return result.join(', ');
    });

    load();
}($));